% test_simulateLaserDynamics.m

function tests = test_simulateLaserDynamics
tests = functiontests(localfunctions);
end

function testSimulationOutput(testCase)
% Test that simulateLaserDynamics produces expected population sizes
% for a known input.

% Define constants
constants = struct(...
    'kcr', 6.85e-19, ...
    'ketu1', 2.1e-21, ...
    'ketu2', 2.1e-21, ...
    'tau2', 16.3e-3, ...
    'tau3', 2.258e-3, ...
    'tau4', 56.63e-6, ...
    'ndop', 8.3e20, ...
    'sigmaEmission', 4e-21, ...
    'sigmaAbsorption', 9e-22, ...
    'sigmaPumpAbs', 6.978e-21, ...
    'lambdaPump', 7.913e-5, ...
    'h', 6.626e-34, ...
    'c', 3e8, ...
    'beta43', 0.100, ...
    'beta42', 0.030, ...
    'beta32', 0.030, ...
    'L', 3.5 ...
);

% Set simulation parameters
Ip_W = 10000; % Input pump power in Watts
endTime = 15e-3; % 15 ms

% Expected output (this would be based on prior calculations)
% For the purpose of this test, we'll assume some expected population values.
% In a real test, these should be replaced with actual expected results.
expected_n_populations = [8.2e20, 5.0e18, 3.0e18, 2.0e18];

% Run simulation
n_populations = simulateLaserDynamics(Ip_W, endTime, constants);

% Verify that the simulated populations are within acceptable tolerance
verifyEqual(testCase, n_populations, expected_n_populations, 'AbsTol', 1e17);
end
